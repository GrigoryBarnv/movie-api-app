
-- ---------- Clean slate (safe drops) ----------
DROP TABLE IF EXISTS public.user_movies    CASCADE;
DROP TABLE IF EXISTS public.movies         CASCADE;
DROP TABLE IF EXISTS public.directors      CASCADE;
DROP TABLE IF EXISTS public.genres         CASCADE;
DROP TABLE IF EXISTS public.users          CASCADE;

-- ---------- Tables ----------
CREATE TABLE public.directors (
  directorid  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        VARCHAR(50) NOT NULL,
  bio         VARCHAR(1000),
  birthyear   DATE,
  deathyear   DATE
);

CREATE TABLE public.genres (
  genreid     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        VARCHAR(50) NOT NULL,
  description VARCHAR(1000),
  CONSTRAINT uq_genre_name UNIQUE (name)
);

CREATE TABLE public.movies (
  movieid     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title       VARCHAR(50) NOT NULL,
  description VARCHAR(1000),
  directorid  INTEGER NOT NULL,
  genreid     INTEGER NOT NULL,
  imageurl    VARCHAR(300),
  featured    BOOLEAN DEFAULT FALSE,
  CONSTRAINT fk_movie_director FOREIGN KEY (directorid) REFERENCES public.directors(directorid),
  CONSTRAINT fk_movie_genre    FOREIGN KEY (genreid)    REFERENCES public.genres(genreid)
);

CREATE TABLE public.users (
  userid      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username    VARCHAR(50) NOT NULL,
  password    VARCHAR(50) NOT NULL,
  email       VARCHAR(50) NOT NULL,
  birth_date  DATE,
  CONSTRAINT uq_username UNIQUE (username),
  CONSTRAINT uq_user_email UNIQUE (email)
);

-- Join table: which users have which movies
CREATE TABLE public.user_movies (
  usermovieid INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  userid      INTEGER NOT NULL,
  movieid     INTEGER NOT NULL,
  CONSTRAINT fk_um_user  FOREIGN KEY (userid) REFERENCES public.users(userid),
  CONSTRAINT fk_um_movie FOREIGN KEY (movieid) REFERENCES public.movies(movieid)
);

-- ---------- Seed data ----------
-- Directors (≥3)
INSERT INTO public.directors (directorid, name, bio, birthyear, deathyear) VALUES
  (1, 'Christopher Nolan', 'British-American filmmaker.', '1970-07-30', NULL),
  (2, 'Greta Gerwig',      'American actress and director.', '1983-08-04', NULL),
  (3, 'James Cameron',     'Canadian filmmaker and explorer.', '1954-08-16', NULL);

-- Genres (≥3)
INSERT INTO public.genres (genreid, name, description) VALUES
  (1, 'Action', 'High-intensity films with stunts and set pieces.'),
  (2, 'Drama',  'Character-driven stories with serious themes.'),
  (3, 'Comedy', 'Humorous films designed to make the audience laugh.');

-- Users (≥3)
INSERT INTO public.users (userid, username, password, email, birth_date) VALUES
  (1, 'alice', 'password123', 'alice@example.com', '1998-02-15'),
  (2, 'bob',   'secret456',   'bob@example.com',   '1995-06-01'),
  (3, 'carol', 'hunter2',     'carol@example.com', '2000-11-20');

-- Movies (≥10; ensure ≥2 share same director and ≥2 share same genre)
-- We use explicit IDs for clarity.
INSERT INTO public.movies (movieid, title, description, directorid, genreid, imageurl, featured) VALUES
  (1,  'Inception',        'A dream heist thriller.',                        1, 1, 'inception.png',       TRUE),
  (2,  'The Dark Knight',  'Batman faces the Joker in Gotham.',              1, 1, 'dark_knight.png',     TRUE),
  (3,  'Interstellar',     'A wormhole mission to save humanity.',           1, 2, 'interstellar.png',    FALSE),
  (4,  'Tenet',            'An agent manipulates time to prevent catastrophe.',1,1,'tenet.png',            FALSE),
  (5,  'Lady Bird',        'Coming-of-age story of a Sacramento teen.',      2, 2, 'lady_bird.png',       FALSE),
  (6,  'Barbie',           'Life in Barbieland is upended.',                 2, 3, 'barbie.png',          TRUE),
  (7,  'Frances Ha',       'A young woman chasing dreams in NYC.',           2, 3, 'frances_ha.png',      FALSE),
  (8,  'Avatar',           'A Marine finds a new life on Pandora.',          3, 1, 'avatar.png',          TRUE),
  (9,  'The Abyss',        'Divers encounter an otherworldly presence.',     3, 2, 'abyss.png',           FALSE),
  (10, 'True Lies',        'A spy balances saving the world and family life.',3,1,'true_lies.png',        FALSE);

-- Users-Movies pairs (≥3)
INSERT INTO public.user_movies (userid, movieid) VALUES
  (1, 1),   -- alice has Inception
  (1, 6),   -- alice has Barbie
  (2, 2),   -- bob has The Dark Knight
  (2, 8),   -- bob has Avatar
  (3, 3);   -- carol has Interstellar

-- PART 2 assigment 
-- Replace the genre 
SELECT genreid, name, description
FROM public.genres
WHERE name = 'Action';

-- Select all movies with genre id 1 
SELECT movieid, title, description
FROM public.movies
WHERE genreid = 1;

-- update users email 
UPDATE public.users 
SET email = 'new_example@email.com'
WHERE username = 'alice';


-- delete a certain movie and make sure 2 with same dir and 2 same gere

--pick the movie to delete
WITH to_del AS (
	SELECT movieid, directorid, genreid
	FROM public.movies
	WHERE title = 'Tenet'
	LIMIT 1 
	),

-- Check current counts so that AFTER removing 1 we still have >= 2 left
-- => therefore BEFORE delete we need counts >= 3
BEGIN;

-- 1) Pick the movie to delete (change the WHERE as needed)
WITH to_del AS (
  SELECT movieid, directorid, genreid
  FROM public.movies
  WHERE title = 'Tenet'         -- <<< change me, or use WHERE movieid = 10
  LIMIT 1
),

-- 2) Guard: only proceed if BEFORE deletion there are >= 3 movies
--    for this director AND >= 3 movies for this genre
ok AS (
  SELECT 1
  FROM to_del td
  JOIN (
    SELECT directorid, COUNT(*) AS c
    FROM public.movies
    GROUP BY directorid
  ) dc ON dc.directorid = td.directorid
  JOIN (
    SELECT genreid, COUNT(*) AS c
    FROM public.movies
    GROUP BY genreid
  ) gc ON gc.genreid = td.genreid
  WHERE dc.c >= 3 AND gc.c >= 3
),

-- 3) Delete dependent links first (user_movies)
del_user_movies AS (
  DELETE FROM public.user_movies um     -- <-- underscore, not hyphen
  USING to_del td, ok                   -- only runs if 'ok' has a row
  WHERE um.movieid = td.movieid
  RETURNING um.usermovieid
)

-- 4) Delete the movie itself (only if 'ok' exists)
DELETE FROM public.movies m
USING to_del td, ok
WHERE m.movieid = td.movieid
RETURNING m.movieid, m.title, m.directorid, m.genreid;

COMMIT;



-- START OF THE BLOCK 
-- 1. add rel_uear and rating to movies - one to many
-- 2.creates actors and tje join table movie_actors - many to many 
-- 3. seeds few actoys and link movies by title - so no need to know id 
BEGIN;

-- 1) Extend MOVIES with one-to-many attributes
ALTER TABLE public.movies
  ADD COLUMN IF NOT EXISTS release_year INTEGER
    CHECK (release_year BETWEEN 1888 AND EXTRACT(YEAR FROM CURRENT_DATE)::INT + 1),
  ADD COLUMN IF NOT EXISTS rating NUMERIC(3,1)
    CHECK (rating BETWEEN 0 AND 10);

-- Optional helpful indexes
CREATE INDEX IF NOT EXISTS idx_movies_directorid   ON public.movies(directorid);
CREATE INDEX IF NOT EXISTS idx_movies_genreid      ON public.movies(genreid);
CREATE INDEX IF NOT EXISTS idx_movies_release_year ON public.movies(release_year);

-- 2) ACTORS (many-to-many with MOVIES)
CREATE TABLE IF NOT EXISTS public.actors (
  actorid   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name      VARCHAR(100) NOT NULL,
  birthdate DATE,
  CONSTRAINT uq_actor_name UNIQUE (name)   -- simple dedupe; real systems disambiguate further
);

-- Join table
CREATE TABLE IF NOT EXISTS public.movie_actors (
  movieid       INTEGER NOT NULL REFERENCES public.movies(movieid) ON DELETE CASCADE,
  actorid       INTEGER NOT NULL REFERENCES public.actors(actorid) ON DELETE CASCADE,
  role          VARCHAR(100),
  billing_order INTEGER,
  PRIMARY KEY (movieid, actorid)
);

-- Helpful indexes
CREATE INDEX IF NOT EXISTS idx_movie_actors_actorid ON public.movie_actors(actorid);

-- 3) Seed some actors (idempotent)
INSERT INTO public.actors (name, birthdate) VALUES
  ('Leonardo DiCaprio', '1974-11-11'),
  ('Joseph Gordon-Levitt', '1981-02-17'),
  ('Elliot Page', '1987-02-21'),
  ('Christian Bale', '1974-01-30'),
  ('Heath Ledger', '1979-04-04'),
  ('Saoirse Ronan', '1994-04-12'),
  ('Greta Gerwig', '1983-08-04'),
  ('Margot Robbie', '1990-07-02'),
  ('Ryan Gosling', '1980-11-12'),
  ('Sam Worthington', '1976-08-02'),
  ('Zoe Saldana', '1978-06-19'),
  ('Anne Hathaway', '1982-11-12'),
  ('Matthew McConaughey', '1969-11-04')
ON CONFLICT (name) DO NOTHING;

-- 4) Populate release_year and rating for known titles (safe even if some titles don’t exist)
UPDATE public.movies SET release_year = 2010, rating = 8.8 WHERE title = 'Inception';
UPDATE public.movies SET release_year = 2008, rating = 9.0 WHERE title = 'The Dark Knight';
UPDATE public.movies SET release_year = 2014, rating = 8.6 WHERE title = 'Interstellar';
UPDATE public.movies SET release_year = 2020, rating = 7.3 WHERE title = 'Tenet';
UPDATE public.movies SET release_year = 2017, rating = 7.4 WHERE title = 'Lady Bird';
UPDATE public.movies SET release_year = 2023, rating = 6.9 WHERE title = 'Barbie';
UPDATE public.movies SET release_year = 2012, rating = 7.5 WHERE title = 'Frances Ha';
UPDATE public.movies SET release_year = 2009, rating = 7.8 WHERE title = 'Avatar';
UPDATE public.movies SET release_year = 1989, rating = 7.6 WHERE title = 'The Abyss';
UPDATE public.movies SET release_year = 1994, rating = 7.3 WHERE title = 'True Lies';

-- 5) Link actors to movies by title (idempotent pattern)
-- Helper CTEs to grab IDs by name/title, then insert into movie_actors
WITH
m_inception AS (SELECT movieid FROM public.movies WHERE title = 'Inception'),
m_dark_knight AS (SELECT movieid FROM public.movies WHERE title = 'The Dark Knight'),
m_interstellar AS (SELECT movieid FROM public.movies WHERE title = 'Interstellar'),
m_barbie AS (SELECT movieid FROM public.movies WHERE title = 'Barbie'),
m_avatar AS (SELECT movieid FROM public.movies WHERE title = 'Avatar'),
m_lady_bird AS (SELECT movieid FROM public.movies WHERE title = 'Lady Bird'),
a AS (
  SELECT name, actorid FROM public.actors
)
-- Inception cast (subset)
INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Cobb', 1
FROM m_inception m JOIN a ON a.name = 'Leonardo DiCaprio'
ON CONFLICT DO NOTHING;

INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Arthur', 2
FROM m_inception m JOIN a ON a.name = 'Joseph Gordon-Levitt'
ON CONFLICT DO NOTHING;

INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Ariadne', 3
FROM m_inception m JOIN a ON a.name = 'Elliot Page'
ON CONFLICT DO NOTHING;

-- The Dark Knight (subset)
INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Bruce Wayne / Batman', 1
FROM m_dark_knight m JOIN a ON a.name = 'Christian Bale'
ON CONFLICT DO NOTHING;

INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Joker', 2
FROM m_dark_knight m JOIN a ON a.name = 'Heath Ledger'
ON CONFLICT DO NOTHING;

-- Interstellar (subset)
INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Brand', 2
FROM m_interstellar m JOIN a ON a.name = 'Anne Hathaway'
ON CONFLICT DO NOTHING;

INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Cooper', 1
FROM m_interstellar m JOIN a ON a.name = 'Matthew McConaughey'
ON CONFLICT DO NOTHING;

-- Barbie (subset)
INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Barbie', 1
FROM m_barbie m JOIN a ON a.name = 'Margot Robbie'
ON CONFLICT DO NOTHING;

INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Ken', 2
FROM m_barbie m JOIN a ON a.name = 'Ryan Gosling'
ON CONFLICT DO NOTHING;

-- Avatar (subset)
INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Jake Sully', 1
FROM m_avatar m JOIN a ON a.name = 'Sam Worthington'
ON CONFLICT DO NOTHING;

INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Neytiri', 2
FROM m_avatar m JOIN a ON a.name = 'Zoe Saldana'
ON CONFLICT DO NOTHING;

-- Lady Bird (subset)
INSERT INTO public.movie_actors (movieid, actorid, role, billing_order)
SELECT m.movieid, a.actorid, 'Christine "Lady Bird" McPherson', 1
FROM m_lady_bird m JOIN a ON a.name = 'Saoirse Ronan'
ON CONFLICT DO NOTHING;

COMMIT;

-- END OF THE BLOCK 
